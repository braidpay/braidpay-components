{"version":3,"sources":["../BraidPayButton.tsx","../utils/cn.ts","../ui/button.tsx","../ui/dialog.tsx","../PaymentForm.tsx","../ui/input.tsx","../ui/label.tsx","../ui/card.tsx","../hooks/usePaymentVerification.ts","../webhook-handler.ts"],"names":["cn","inputs","twMerge","clsx","__name","buttonVariants","cva","Button","V","className","variant","size","asChild","props","ref","jsx","Slot","Dialog","DialogTrigger","DialogPortal","DialogClose","DialogOverlay","T","DialogContent","children","jsxs","DialogHeader","DialogFooter","DialogTitle","DialogDescription","BraidPayButton","paymentLink","buttonText","onPaymentComplete","dialogClassName","iframeHeight","initialOpen","buttonProps","isPaymentModalOpen","setIsPaymentModalOpen","useState","useEffect","handleMessage","event","_a","Fragment","Input","q","type","Label","K","Card","CardHeader","CardTitle","CardDescription","CardContent","CardFooter","usePaymentVerification","paymentLinkID","initialEmail","pollingInterval","verificationEndpoint","status","setStatus","email","setEmail","isPolling","setIsPolling","checkPaymentStatus","useCallback","response","data","newStatus","error","intervalId","registerPayment","newEmail","PaymentForm","productName","price","currency","successMessage","isEmailSubmitted","setIsEmailSubmitted","handleEmailSubmit","e","handlePaymentModalChange","open","CheckCircle2","verifyWebhookSignature","webhookSecret","toAddress","amount","signature","expectedSignature","crypto","processBraidPayWebhook","payload","options"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport type { ReactNode } from \"react\"\nimport { Button } from \"./ui/button\"\nimport type { ButtonProps } from \"./ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"./ui/dialog\"\n\nexport interface BraidPayButtonProps extends Omit<ButtonProps, 'onClick'> {\n  paymentLink: string;\n  children?: ReactNode;\n  onPaymentComplete?: (data: any) => void;\n  className?: string;\n  dialogClassName?: string;\n  buttonText?: string;\n  iframeHeight?: string | number;\n  initialOpen?: boolean;\n}\n\n/**\n * BraidPayButton - A reusable button component that opens a dialog with a BraidPay payment iframe\n * \n * @param paymentLink - The BraidPay payment link URL\n * @param buttonText - Text to display on the button (default: \"Pay with USDC\")\n * @param children - Optional custom content for the button\n * @param onPaymentComplete - Optional callback function when payment is completed\n * @param className - Optional CSS class for the button\n * @param dialogClassName - Optional CSS class for the dialog\n * @param iframeHeight - Optional height for the iframe (default: \"580px\")\n * @param initialOpen - Whether the payment dialog should be open initially\n */\nexport default function BraidPayButton({\n  paymentLink,\n  buttonText = \"Pay with USDC\",\n  children,\n  onPaymentComplete,\n  className = \"\",\n  dialogClassName = \"\",\n  iframeHeight = \"580px\",\n  initialOpen = false,\n  ...buttonProps\n}: BraidPayButtonProps) {\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(initialOpen)\n\n  // Handle initial open state\n  useEffect(() => {\n    setIsPaymentModalOpen(initialOpen);\n  }, [initialOpen]);\n\n  // Handle message events from the iframe\n  useEffect(() => {\n    const handleMessage = (event: MessageEvent) => {\n      // Implement if BraidPay provides postMessage communication\n      if (event.origin === new URL(paymentLink).origin) {\n        if (event.data?.type === 'payment_complete') {\n          if (onPaymentComplete) {\n            onPaymentComplete(event.data);\n          }\n          setIsPaymentModalOpen(false);\n        }\n      }\n    };\n\n    window.addEventListener('message', handleMessage);\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, [paymentLink, onPaymentComplete]);\n\n  return (\n    <>\n      <Dialog open={isPaymentModalOpen} onOpenChange={setIsPaymentModalOpen}>\n        <DialogTrigger asChild>\n          <Button \n            className={className}\n            {...buttonProps}\n          >\n            {children || buttonText}\n          </Button>\n        </DialogTrigger>\n        <DialogContent className={`max-w-4xl w-full !h-[90vh] p-0 bg-background ${dialogClassName}`}>\n          <div className=\"relative h-full flex flex-col\">\n            <div className=\"flex-1\">\n              <iframe \n                src={paymentLink}\n                className=\"w-full h-full border-0 rounded-md shadow-sm\"\n                style={{ height: iframeHeight }}\n                allow=\"payment\"\n              />\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n} ","import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n} ","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../utils/cn\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants } ","import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { cn } from \"../utils/cn\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n} ","\"use client\"\n\nimport * as React from \"react\"\nimport { useState, FormEvent, useEffect } from \"react\"\nimport { Button } from \"./ui/button\"\nimport { Input } from \"./ui/input\"\nimport { Label } from \"./ui/label\"\nimport { Card, CardContent } from \"./ui/card\"\nimport { CheckCircle2 } from \"lucide-react\"\nimport BraidPayButton from \"./BraidPayButton\"\nimport usePaymentVerification from \"./hooks/usePaymentVerification\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"./ui/dialog\"\n\ninterface PaymentFormProps {\n  paymentLinkID: string;\n  paymentLink: string;\n  productName: string;\n  price: number | string;\n  currency?: string;\n  onPaymentComplete?: (data: any) => void;\n  successMessage?: string;\n  buttonText?: string;\n  className?: string;\n}\n\n/**\n * PaymentForm - A comprehensive payment form that collects email and integrates with BraidPay\n * \n * @param paymentLinkID - The BraidPay payment link ID for webhook verification\n * @param paymentLink - The BraidPay payment link URL\n * @param productName - Name of the product being purchased\n * @param price - Price of the product\n * @param currency - Currency symbol (default: \"$\")\n * @param onPaymentComplete - Callback when payment is completed\n * @param successMessage - Message to show on successful payment\n * @param buttonText - Text to display on the payment button\n * @param className - Optional CSS class for the form container\n */\nexport default function PaymentForm({\n  paymentLinkID,\n  paymentLink,\n  productName,\n  price,\n  currency = \"$\",\n  onPaymentComplete,\n  successMessage = \"Thank you for your purchase! Your access has been granted.\",\n  buttonText = \"Pay Now\",\n  className = \"\",\n}: PaymentFormProps) {\n  const [email, setEmail] = useState(\"\")\n  const [isEmailSubmitted, setIsEmailSubmitted] = useState(false)\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false)\n\n  const { \n    status, \n    registerPayment, \n    isPolling \n  } = usePaymentVerification({\n    paymentLinkID,\n    pollingInterval: 3000,\n    onPaymentComplete: (status) => {\n      if (onPaymentComplete) {\n        onPaymentComplete(status);\n      }\n      // Close payment modal when payment is complete\n      setIsPaymentModalOpen(false);\n    }\n  });\n\n  const handleEmailSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    if (email && email.includes('@')) {\n      registerPayment(email);\n      setIsEmailSubmitted(true);\n      // Automatically open the payment modal after email submission\n      setIsPaymentModalOpen(true);\n    }\n  };\n\n  // Close the polling message and reset form if payment modal is closed\n  const handlePaymentModalChange = (open: boolean) => {\n    setIsPaymentModalOpen(open);\n    if (!open && !status.success) {\n      // Only reset if payment was not successful\n      setIsEmailSubmitted(false);\n    }\n  };\n\n  return (\n    <div className={className}>\n      {status.success && status.shouldShowSuccess ? (\n        <Card className=\"w-full bg-green-50 border-green-200\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col items-center justify-center text-center p-4\">\n              <CheckCircle2 className=\"h-16 w-16 text-green-500 mb-4\" />\n              <h2 className=\"text-xl font-semibold text-green-800\">{successMessage}</h2>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"w-full\">\n          <CardContent className=\"pt-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-medium\">{productName}</h3>\n                <div className=\"text-xl font-bold\">{currency}{price}</div>\n              </div>\n              \n              {!isEmailSubmitted ? (\n                <form onSubmit={handleEmailSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"youremail@example.com\"\n                      required\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\">Continue to Payment</Button>\n                </form>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"bg-blue-50 p-3 rounded-md text-blue-800 text-sm\">\n                    {isPolling ? \n                      \"We're waiting to confirm your payment. This dialog will automatically update when your payment is processed.\" :\n                      \"Click the button below to complete your payment.\"\n                    }\n                  </div>\n                  \n                  <Button\n                    onClick={() => setIsPaymentModalOpen(true)}\n                    className=\"w-full\"\n                  >\n                    {buttonText}\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Payment Dialog */}\n      <Dialog open={isPaymentModalOpen} onOpenChange={handlePaymentModalChange}>\n        <DialogContent className=\"max-w-4xl w-full !h-[90vh] p-0 bg-background\">\n          <div className=\"relative h-full flex flex-col\">\n            <div className=\"flex-1\">\n              <iframe \n                src={paymentLink}\n                className=\"w-full h-full border-0 rounded-md shadow-sm\"\n                allow=\"payment\"\n              />\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n} ","import * as React from \"react\"\nimport { cn } from \"../utils/cn\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input } ","import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cn } from \"../utils/cn\"\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n      className\n    )}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label } ","import * as React from \"react\"\nimport { cn } from \"../utils/cn\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} ","import { useState, useEffect, useCallback } from 'react';\nimport type { PaymentVerificationOptions, PaymentStatus } from '../types';\n\nexport default function usePaymentVerification({\n  paymentLinkID,\n  email: initialEmail = '',\n  pollingInterval = 5000,\n  verificationEndpoint = '/api/check-payment-status',\n  onPaymentComplete,\n}: PaymentVerificationOptions) {\n  const [status, setStatus] = useState<PaymentStatus>({\n    success: false,\n    isPending: false,\n    shouldShowSuccess: false\n  });\n  const [email, setEmail] = useState(initialEmail);\n  const [isPolling, setIsPolling] = useState(false);\n\n  const checkPaymentStatus = useCallback(async () => {\n    try {\n      const response = await fetch(verificationEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          paymentLinkID,\n          email,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to check payment status');\n      }\n\n      const data = await response.json();\n      \n      const newStatus: PaymentStatus = {\n        success: data.success,\n        isPending: data.isPending || false,\n        shouldShowSuccess: data.success && !data.isPending,\n        error: data.error,\n        data: data\n      };\n\n      setStatus(newStatus);\n\n      if (newStatus.success && !newStatus.isPending && onPaymentComplete) {\n        onPaymentComplete(newStatus);\n        setIsPolling(false);\n      }\n\n      return newStatus;\n    } catch (error) {\n      console.error('Error checking payment status:', error);\n      setStatus({\n        success: false,\n        isPending: false,\n        shouldShowSuccess: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      });\n      setIsPolling(false);\n      return null;\n    }\n  }, [paymentLinkID, email, verificationEndpoint, onPaymentComplete]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (isPolling && email) {\n      // Initial check\n      checkPaymentStatus();\n\n      // Set up polling\n      intervalId = setInterval(checkPaymentStatus, pollingInterval);\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isPolling, email, checkPaymentStatus, pollingInterval]);\n\n  const registerPayment = useCallback((newEmail: string) => {\n    setEmail(newEmail);\n    setIsPolling(true);\n    setStatus({\n      success: false,\n      isPending: true,\n      shouldShowSuccess: false\n    });\n  }, []);\n\n  return {\n    status,\n    registerPayment,\n    checkPaymentStatus,\n    isPolling,\n  };\n} ","import crypto from 'crypto';\n\n// BraidPay webhook payload interface\nexport interface BraidPayWebhookPayload {\n  paymentLinkID: string;\n  paymentID: string;\n  fromAddress: string;\n  toAddress: string;\n  hash: string;\n  network: 'ETHEREUM' | 'POLYGON' | 'BASE' | 'SOLANA';\n  token: 'USDC' | 'USDT' | 'PYUSD';\n  amount: number;\n  status: 'PENDING' | 'COMPLETED';\n  createdAt: string;\n  updatedAt: string;\n  Payer_Email?: string;\n  [key: string]: unknown; // Allow for additional custom fields\n}\n\n/**\n * Verify the BraidPay webhook signature\n * \n * @param webhookSecret The webhook secret from BraidPay dashboard\n * @param toAddress The payment destination address\n * @param amount The payment amount\n * @param signature The signature from the X-Webhook-Signature header\n * @returns boolean indicating if signature is valid\n */\nexport function verifyWebhookSignature(\n  webhookSecret: string, \n  toAddress: string, \n  amount: number, \n  signature: string\n): boolean {\n  const expectedSignature = crypto\n    .createHmac('sha256', webhookSecret)\n    .update(`${toAddress}${amount}`)\n    .digest('hex');\n  \n  return signature === expectedSignature;\n}\n\n// Type for the handler function\nexport type BraidPayWebhookHandler = (payload: BraidPayWebhookPayload) => Promise<void> | void;\n\n// Options for the webhook processor\nexport interface BraidPayWebhookProcessorOptions {\n  webhookSecret: string;\n  onCompleted?: BraidPayWebhookHandler;\n  onPending?: BraidPayWebhookHandler;\n  onError?: (error: Error) => void;\n}\n\n/**\n * Process a BraidPay webhook request\n * \n * @param payload The webhook payload\n * @param signature The signature from X-Webhook-Signature header\n * @param options Configuration options including handlers\n * @returns Object with success flag and any error message\n */\nexport async function processBraidPayWebhook(\n  payload: BraidPayWebhookPayload,\n  signature: string,\n  options: BraidPayWebhookProcessorOptions\n) {\n  try {\n    // Verify signature\n    if (!verifyWebhookSignature(\n      options.webhookSecret,\n      payload.toAddress,\n      payload.amount,\n      signature\n    )) {\n      throw new Error('Invalid webhook signature');\n    }\n\n    // Process based on status\n    if (payload.status === 'COMPLETED' && options.onCompleted) {\n      await options.onCompleted(payload);\n    } else if (payload.status === 'PENDING' && options.onPending) {\n      await options.onPending(payload);\n    }\n\n    return { success: true };\n  } catch (error) {\n    if (options.onError && error instanceof Error) {\n      options.onError(error);\n    }\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Unknown error' \n    };\n  }\n} "]}